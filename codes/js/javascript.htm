
<p>JavaScript 是根据 "ECMAScript"标准制定的网页脚本语言。这个标准由 ECMA 组织发展和维护。ECMA-262 是正式的 JavaScript 标准。这个标准基于 JavaScript (Netscape) 和 JScript (Microsoft)。Netscape (Navigator 2.0) 的 Brendan Eich 发明了这门语言，从 1996 年开始，已经出现在所有的 Netscape 和 Microsoft 浏览器中。ECMA-262 的开发始于 1996 年，在 1997 年 7 月，ECMA 会员大会采纳了它的首个版本。</p>
<p>本系列教程旨在向大家分享本人当年学习Javascript的笔记和心得。本系列教程预计分五个部分。</p>
<p>第一部分：Javascript内置对象。</p>
<p>第二部分：浏览器对象。</p>
<p>第三部分：文档对象模型。</p>
<p>第四部分：面向对象封装及闭包的应用。</p>
<p>第五部分：系列专题(正则表达式，框架学习，etc...)。</p>
<p>Javascript其实不是一种完全的面向对象的语言，准确的说，应该是一种基于对象的编程语言，尽管我们可以模拟面向对象的特性，但是一旦脱离它的容器及一些基本的对象组件，Javascript将寸步难行。如果缺少DOM组件的支持，我们就无法写出优雅交互性良好的用户界面，如果缺少XMLHTTPRequest组件的支持，我们将无法实现让人心动的Ajax。所以，要学好Javascript，我们必须很好的掌握Javascript基本组件的使用。</p>
<p>好，我们下面就从第一部分开始，开始进入Javascript内置对象章节的学习。</p>
<p><strong>全局属性</strong> <br />
<table style="width: 640px; background-color: #ccccff;" border="0" cellspacing="1" cellpadding="2">
    <tbody>
    <tr>
        <td style="background-color:#FFFFFF; color:#999900; width:160px;">Infinity</td>
        <td style="background-color:#FFFFFF;">表示正无穷大的数值</td>
    </tr>
    <tr>
        <td style="background-color:#FFFFFF; color:#999900">NaN</td>
        <td style="background-color:#FFFFFF;">非数字值</td>
    </tr>
    <tr>
        <td style="background-color:#FFFFFF; color:#999900">undefined </td>
        <td style="background-color:#FFFFFF;">未定义的值</td>
    </tr>
    <tr>
        <td style="background-color:#FFFFFF; color:#0000ff">decodeURI()</td>
        <td style="background-color:#FFFFFF;">对encodeURI()转义的字符串解码。</td>
    </tr>
    <tr>
        <td style="background-color:#FFFFFF; color:#0000ff;">decodeURIComponent()</td>
        <td style="background-color:#FFFFFF;">对encodeURIComponent()转义的字符串解码。</td>
    </tr>
    <tr>
        <td style="background-color:#FFFFFF; color:#0000ff">encodeURI()</td>
        <td style="background-color:#FFFFFF;">返回参数的副本,其中某些字符被十六进制的转义序列替换了, 建议使用encodeURIComponent()对字符串进行编码。</td>
    </tr>
    <tr>
        <td style="background-color:#FFFFFF; color:#0000ff">encodeURIComponent()</td>
        <td style="background-color:#FFFFFF;">返回参数的副本,其中某些字符被十六进制的转义序列替换了。</td>
    </tr>
    <tr>
        <td style="background-color:#FFFFFF; color:#0000ff">escape()</td>
        <td style="background-color:#FFFFFF;">用转义序列替换某些字符来字符串编码。</td>
    </tr>
    <tr>
        <td style="background-color:#FFFFFF; color:#0000ff;">eval()</td>
        <td style="background-color:#FFFFFF;">计算Javascript代码串,返回结果。</td>
    </tr>
    <tr>
        <td style="background-color:#FFFFFF; color:#0000ff">isFinite()</td>
        <td style="background-color:#FFFFFF;">检验一个值是否是无穷大的数字。</td>
    </tr>
    <tr>
        <td style="background-color:#FFFFFF; color:#0000ff">isNaN()</td>
        <td style="background-color:#FFFFFF;">检验一个值是否是非数字的值。</td>
    </tr>
    <tr>
        <td style="background-color:#FFFFFF; color:#0000ff">parseFloat()</td>
        <td style="background-color:#FFFFFF;">从字符串解析一个数字。</td>
    </tr>
    <tr>
        <td style="background-color:#FFFFFF; color:#0000ff">parseInt()</td>
        <td style="background-color:#FFFFFF;">从字符串解析一个数字。</td>
    </tr>
    <tr>
        <td style="background-color:#FFFFFF; color:#0000ff">unescape()</td>
        <td style="background-color:#FFFFFF;">对用escape()编码的字符串解码。</td>
    </tr>
    </tbody>
</table>
</p>
<p><strong>javascript内置对象</strong> <br /><img src="http://p.blog.csdn.net/images/p_blog_csdn_net/zhiqiangzhan/EntryImages/20091013/global.jpg" alt="内置对象" /> <ol>
    <li>Object对象
        <p>
        <table style="width: 640px; background-color: #ccccff;" border="0" cellspacing="1" cellpadding="2">
            <tbody>
            <tr>
                <td style="background-color:#FFFFFF; color:#999900">constructor</td>
                <td style="background-color:#FFFFFF;">对一个Javascript函数的引用,该函数是对象的构造函数。</td>
            </tr>
            <tr>
                <td style="background-color:#FFFFFF; color:#0000ff">hasOwnProperty()</td>
                <td style="background-color:#FFFFFF;">检查对象是否有局部定义的(非继承的)、具有特定名字的属性。</td>
            </tr>
            <tr>
                <td style="background-color:#FFFFFF; color:#0000ff">isPrototypeOf()</td>
                <td style="background-color:#FFFFFF;">检查对象是否是指定对象的原型。</td>
            </tr>
            <tr>
                <td style="background-color:#FFFFFF; color:#0000ff;">propertyIsEnumerable()</td>
                <td style="background-color:#FFFFFF;">检查指定的属性是否存在,以及是否能用for/in循环枚举。</td>
            </tr>
            <tr>
                <td style="background-color:#FFFFFF; color:#0000ff">toLocaleString()</td>
                <td style="background-color:#FFFFFF;">返回对象地方化的字符串表示。</td>
            </tr>
            <tr>
                <td style="background-color:#FFFFFF; color:#0000ff">toString()</td>
                <td style="background-color:#FFFFFF;">返回对象的字符串表示。</td>
            </tr>
            <tr>
                <td style="background-color:#FFFFFF; color:#0000ff">valueOf()</td>
                <td style="background-color:#FFFFFF;">返回对象的原始值(如果存在)。</td>
            </tr>
            </tbody>
        </table>
</p>
</li>
<li>Arguments对象(只在函数内部定义)
    <p>
    <table style="width: 640px; background-color: #ccccff;" border="0" cellspacing="1" cellpadding="2">
        <tbody>
        <tr>
            <td style="background-color:#FFFFFF; color:#999900">callee</td>
            <td style="background-color:#FFFFFF;">对当前正在执行函数的引用。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#999900">length</td>
            <td style="background-color:#FFFFFF;">传递给函数的实际参数个数。</td>
        </tr>
        </tbody>
    </table>
    </p>
</li>
<li>Function对象
    <p>
    <table style="width: 640px; background-color: #ccccff;" border="0" cellspacing="1" cellpadding="2">
        <tbody>
        <tr>
            <td style="background-color:#FFFFFF; color:#999900; width:120px;">arguments</td>
            <td style="background-color:#FFFFFF;">Arguments对象, 反对使用该属性。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#999900">caller</td>
            <td style="background-color:#FFFFFF;">对调用当前函数的Funciton对象的引用,反对使用该属性。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#999900">length</td>
            <td style="background-color:#FFFFFF;">在声名函数时指定的命名参数个数。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#999900">prototype</td>
            <td style="background-color:#FFFFFF;">一个对象,用于构造函数,这个对象定义的属性和方法由构造函数创建的所有对象共享。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#0000ff">apply()</td>
            <td style="background-color:#FFFFFF;">将函数作为指定对象的方法来调用,传递给它的是指定的参数数组。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#0000ff">call()</td>
            <td style="background-color:#FFFFFF;">将函数作为指定对象的方法来调用,传递给它的是指定的参数。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#0000ff">toString()</td>
            <td style="background-color:#FFFFFF;">返回函数的字符串表示。</td>
        </tr>
        </tbody>
    </table>
    <br />

    函数是进行模块化程序设计的基础，编写复杂的Ajax应用程序，必须对函数有更深入的了解。JavaScript中的函数不同于其他的语言，每个函数都是作为一个对象被维护和运行的。通过函数对象的性质，可以很方便的将一个函数赋值给一个变量或者将函数作为参数传递。在继续讲述之前，先看一下函数的使用语法：<br />
    Function 构造函数是 Function(arg1, arg2, ... argn, funcBody);<br />
    还可以用以下的几种方式定义JavaScript函数对象。<br />

    function func1(…){…}<br />
    var func2=function(…){…};<br />
    var func3=function func4(…){…};<br />

    <br />

    示例：

    <script type="text/javascript">
        function doSum(i){
            var sum = (function(){
                var i = arguments[0] || 0;
                if(i > 0){
                    return i + arguments.callee(i - 1);
                }else{
                    return 0;
                }
            })(i);
            alert(sum);
        }

        var obj1 = {
            a: 1,
            b: 2
        };
        var obj2 = {
            c: 'you',
            a: 'me',
            o: obj1,
            x: [4, 5, 6]
        };

        var dump = function(o){
            var result = '';
            if(o === window){
                result = 'window';
            }else if(typeof o === 'object'){
                var empty = true;
                result += '{ ';
                for(var p in o){
                    result += p + ":" + arguments.callee(o[p]);
                    empty = false;
                    result += ",";
                }
                if(!empty){
                    result = result.substr(0, result.length - 1);
                }
                result += ' }';

            }else{
                result = o.toString();
            }
            return result;
        }


        function show(){
            var str = 'this: ';
            str += dump(this);
            str += '\narguments: ';
            str += dump([].slice.call(arguments, 0));
            str += '\n';
            return str;
        }

        function doTest(){
            alert(show('test1', 'ok', 'test default object window'));
            alert(show.apply(obj1, ['test2', 'ok', 'test apply on obj1']));
            alert(show.apply(obj2, ['test3', 'ok', 'test apply on obj2']));
            alert(show.call(obj1, 'test4', 'ok', 'test call on obj1'));
            alert(show.call(obj2, 'test5', 'ok', 'test call on obj2'));
        }

        function doTest2(){
            try{
                alert(show.apply(obj1, 'test1', 'ok', 'test apply on obj1'));
            }catch(e){
                alert("Error: " + e.name + ', ' + e.message);
            }
            alert(show.call(obj1, ['test2', 'ok', 'test call on obj1']));
        }


    </script>

    <p>
        当进行函数调用时，除了指定的参数外，还创建一个隐含的对象——arguments。arguments是一个类似数组但不是数组的对象，说它类似是因为它具有数组一样的访问性质，可以用arguments[index]这样的语法取值，拥有数组长度属性length。arguments对象存储的是实际传递给函数的参数，而不局限于函数声明所定义的参数列表。arguments对象的另一个属性是callee，它表示对函数对象本身的引用，这有利于实现无名函数的递归或者保证函数的封装性，例如使用递归来计算1到n的自然数之和：
        <br />

        <button onclick="doSum(100)">运行代码</button>
    </p>

    <p>
        JavaScript为函数对象定义了两个方法：apply和call，它们的作用都是将函数绑定到另外一个对象上去运行，两者仅在定义参数的方式有所区别：<br />
        Function.prototype.apply(thisArg,argArray);<br />
        Function.prototype.call(thisArg[,arg1[,arg2…]]); <br />
        　　从函数原型可以看到，第一个参数都被取名为thisArg，即所有函数内部的this指针都会被赋值为thisArg，这就实现了将函数作为另外一个对象的方法运行的目的。两个方法除了thisArg参数，都是为Function对象传递的参数。下面的代码说明了apply和call方法的工作方式：<br />
        <button onclick="doTest()">运行代码</button>
    </p>

    <p>
        如果给apply指定的参数不是数组类型，这将会导致异常产生，而如果为call指定了一个数组参数，它将会被解析为一个单独的数组参数。<br />
        <button onclick="doTest2()">运行代码</button>
    </p>

    </p>
</li>
<li>Array对象
    <p>
    <table style="width: 640px; background-color: #ccccff;" border="0" cellspacing="1" cellpadding="2">
        <tbody>
        <tr>
            <td style="background-color:#FFFFFF; color:#999900; width:120px;">length</td>
            <td style="background-color:#FFFFFF;">数组包含的元素的个数。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#0000ff">concat()</td>
            <td style="background-color:#FFFFFF;">给数组添加元素(此操作原数组的值不变)。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#0000ff">join()</td>
            <td style="background-color:#FFFFFF;">把数组中所有元素转换成字符串,然后连接起来。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#0000ff">pop()</td>
            <td style="background-color:#FFFFFF;">删除并返回数组最后一个元素。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#0000ff">push()</td>
            <td style="background-color:#FFFFFF;">把一个元素添加到数组的尾部,返回值为数组的新长度(Bug:ver1.2中,将返回数组最后一个元素)。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#0000ff">reverse()</td>
            <td style="background-color:#FFFFFF;">在原数组上颠倒数组中元素的顺序。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#0000ff">shift()</td>
            <td style="background-color:#FFFFFF;">删除并返回数组的头部元素。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#0000ff">slice()</td>
            <td style="background-color:#FFFFFF;">返回数组的一个子数组,该方法不修改原数组(Bug:在IE4中start不能为负数)。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#0000ff">sort()</td>
            <td style="background-color:#FFFFFF;">从原数组上对数组进行排序。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#0000ff">splice()</td>
            <td style="background-color:#FFFFFF;">插入,删除,替换一个数组元素。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#0000ff">toLocalString()</td>
            <td style="background-color:#FFFFFF;">把数组转换成一个局部字符串。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#0000ff">toString()</td>
            <td style="background-color:#FFFFFF;">把数组转换成一个字符串。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#0000ff">unshift()</td>
            <td style="background-color:#FFFFFF;">在数组头部插入一个元素, 返回值为数组的新长度。</td>
        </tr>
        </tbody>
    </table>
    </p>
</li>
<li>Date对象
    <p>
    <table style="width: 640px; background-color: #ccccff;" border="0" cellspacing="1" cellpadding="2">
        <tbody>
        <tr>
            <td style="background-color:#FFFFFF; color:#0000ff">getDate()</td>
            <td style="background-color:#FFFFFF;">返回月中的某一天。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#0000ff">getDay()</td>
            <td style="background-color:#FFFFFF;">返回一周中的某一天。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#0000ff">getFullYear()</td>
            <td style="background-color:#FFFFFF;">返回日期中的年份。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#0000ff">getUTCFullYear()</td>
            <td style="background-color:#FFFFFF;">同上。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#0000ff">getHours()</td>
            <td style="background-color:#FFFFFF;">返回对象的小时字段。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#0000ff">getUTCHours()</td>
            <td style="background-color:#FFFFFF;">同上。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#0000ff">getMilliseconds()</td>
            <td style="background-color:#FFFFFF;">返回对象的毫秒字段。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#0000ff">getUTCMilliseconds()</td>
            <td style="background-color:#FFFFFF;">同上。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#0000ff">getMinutes()</td>
            <td style="background-color:#FFFFFF;">返回对象的分钟字段。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#0000ff">getUTCMinutes()</td>
            <td style="background-color:#FFFFFF;">同上。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#0000ff">getMouth()</td>
            <td style="background-color:#FFFFFF;">返回对象的月份字段。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#0000ff">getUTCMouth()</td>
            <td style="background-color:#FFFFFF;">同上。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#0000ff">getSeconds()</td>
            <td style="background-color:#FFFFFF;">返回对象的秒字段。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#0000ff">getUTCSeconds()</td>
            <td style="background-color:#FFFFFF;">同上。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#0000ff">getTime()</td>
            <td style="background-color:#FFFFFF;">返回对象内部的毫秒表示。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#0000ff">getTimezoneoffset()</td>
            <td style="background-color:#FFFFFF;">返回这个日期的本地时间和UTC表示之间的时差,以分钟为单位。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#0000ff">getYear()</td>
            <td style="background-color:#FFFFFF;">推荐使用getFullYear()。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#0000ff">setDate()</td>
            <td style="background-color:#FFFFFF;">设置对象月中的某一天。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#0000ff">setUTCDate()</td>
            <td style="background-color:#FFFFFF;">同上。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#0000ff">setFullYear()</td>
            <td style="background-color:#FFFFFF;">设置对象中的年份字段。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#0000ff">setUTCFullYear()</td>
            <td style="background-color:#FFFFFF;">同上。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#0000ff">setHours()</td>
            <td style="background-color:#FFFFFF;">设置对象的小时字段。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#0000ff">setUTCHours()</td>
            <td style="background-color:#FFFFFF;">同上。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#0000ff">setMilliseconds()</td>
            <td style="background-color:#FFFFFF;">设置对象的毫秒字段。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#0000ff">setUTCMilliseconds()</td>
            <td style="background-color:#FFFFFF;">同上。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#0000ff">setMinutes()</td>
            <td style="background-color:#FFFFFF;">设置对象的分钟字段。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#0000ff">setUTCMinutes()</td>
            <td style="background-color:#FFFFFF;">同上。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#0000ff">setMouth()</td>
            <td style="background-color:#FFFFFF;">设置对象的月份字段。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#0000ff">setUTCMouth()</td>
            <td style="background-color:#FFFFFF;">同上。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#0000ff">setSeconds()</td>
            <td style="background-color:#FFFFFF;">设置对象的秒字段。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#0000ff">setUTCSeconds()</td>
            <td style="background-color:#FFFFFF;">同上。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#0000ff">setTime()</td>
            <td style="background-color:#FFFFFF;">使用毫秒的形式设置对象的各个字段。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#0000ff">setYear()</td>
            <td style="background-color:#FFFFFF;">推荐使用setFullYear()。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#0000ff">toDateString()</td>
            <td style="background-color:#FFFFFF;">返回日期的日期部分的字符串表示。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#0000ff">toGMTString()</td>
            <td style="background-color:#FFFFFF;">推荐使用toUTCString()。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#0000ff">toLacaleDataString()</td>
            <td style="background-color:#FFFFFF;">返回日期的日期部分的字符串表示。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#0000ff">toLocaleString()</td>
            <td style="background-color:#FFFFFF;">将对象转换成一个字符串。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#0000ff">toLacaleTimeString()</td>
            <td style="background-color:#FFFFFF;">返回日期的时间部分的字符串表示。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#0000ff">toString()</td>
            <td style="background-color:#FFFFFF;">将对象转换成一个字符串。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#0000ff">toTimeString()</td>
            <td style="background-color:#FFFFFF;">将对象转换成一个字符串。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#0000ff">toString()</td>
            <td style="background-color:#FFFFFF;">返回日期的时间部分的字符串表示。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#0000ff">toUTCString()</td>
            <td style="background-color:#FFFFFF;">将对象转换成一个字符串。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#0000ff">valueOf()</td>
            <td style="background-color:#FFFFFF;">将对象转换成它的内部毫秒格式。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#999900">parse()</td>
            <td style="background-color:#FFFFFF;">静态方法，解析日期和时间的字符串表示,返回它的内部毫秒表示。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#999900">UTC()</td>
            <td style="background-color:#FFFFFF;">静态方法，返回指定的UTC日期和时间的毫秒表示。</td>
        </tr>
        </tbody>
    </table>
    </p>
</li>
<li>Math对象
    <p>
    <table style="width: 640px; background-color: #ccccff;" border="0" cellspacing="1" cellpadding="2">
        <tbody>
        <tr>
            <td style="background-color:#FFFFFF; color:#999900">Math.E</td>
            <td style="background-color:#FFFFFF;">常量e,自然对数的底数。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#999900">Math.LN10</td>
            <td style="background-color:#FFFFFF;">10的自然对数。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#999900">Math.LN2</td>
            <td style="background-color:#FFFFFF;">2的自然对数。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#999900">Math.LOG10E</td>
            <td style="background-color:#FFFFFF;">以10为底的e的对数。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#999900">Math.LOG2E</td>
            <td style="background-color:#FFFFFF;">以2为底的e的对数。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#999900">Math.PI</td>
            <td style="background-color:#FFFFFF;">常量&pi;。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#999900">Math.SQRT1_2</td>
            <td style="background-color:#FFFFFF;">1/2的平方根。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#999900">Math.SQRT2</td>
            <td style="background-color:#FFFFFF;">2的平方根。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#999900">abs()</td>
            <td style="background-color:#FFFFFF;">静态方法, 求绝对值。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#999900">acos()</td>
            <td style="background-color:#FFFFFF;">静态方法。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#999900">asin()</td>
            <td style="background-color:#FFFFFF;">静态方法。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#999900">acos()</td>
            <td style="background-color:#FFFFFF;">静态方法。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#999900">atan()</td>
            <td style="background-color:#FFFFFF;">静态方法。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#999900">atan2()</td>
            <td style="background-color:#FFFFFF;">静态方法, 计算X轴到一个点的角度。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#999900">ceil()</td>
            <td style="background-color:#FFFFFF;">静态方法, 对一个数上舍入。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#999900">cos()</td>
            <td style="background-color:#FFFFFF;">静态方法。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#999900">exp()</td>
            <td style="background-color:#FFFFFF;">静态方法, 计算e的指数。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#999900">floor()</td>
            <td style="background-color:#FFFFFF;">静态方法, 对一个数下舍入。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#999900">log()</td>
            <td style="background-color:#FFFFFF;">静态方法, 计算自然对数。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#999900">max()</td>
            <td style="background-color:#FFFFFF;">静态方法。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#999900">min()</td>
            <td style="background-color:#FFFFFF;">静态方法。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#999900">pow()</td>
            <td style="background-color:#FFFFFF;">计算参数1的参数2次方。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#999900">radom()</td>
            <td style="background-color:#FFFFFF;">静态方法。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#999900">round()</td>
            <td style="background-color:#FFFFFF;">静态方法。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#999900">sin()</td>
            <td style="background-color:#FFFFFF;">静态方法。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#999900">sqrt()</td>
            <td style="background-color:#FFFFFF;">静态方法。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#999900">tan()</td>
            <td style="background-color:#FFFFFF;">静态方法。</td>
        </tr>
        </tbody>
    </table>
    </p>
</li>
<li>Number对象
    <p>
    <table style="width: 640px; background-color: #ccccff;" border="0" cellspacing="1" cellpadding="2">
        <tbody>
        <tr>
            <td style="background-color:#FFFFFF; color:#999900">Number.MAX_VALUE</td>
            <td style="background-color:#FFFFFF;">可表示的最大的数。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#999900">Number.MIN_VALUE</td>
            <td style="background-color:#FFFFFF;">可表示的最小的数。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#999900">Number.NaN</td>
            <td style="background-color:#FFFFFF;">非数字值。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#999900">Number.NEGATIVE_INFINITY</td>
            <td style="background-color:#FFFFFF;">负无穷大,溢出时返回该值。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#999900">Number.POSITIVE_INFINITY</td>
            <td style="background-color:#FFFFFF;">正无穷大,溢出时返回该值。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#0000ff">toString()</td>
            <td style="background-color:#FFFFFF;">把数字转换成字符串,使用指定的基数。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#0000ff">toLocaleString()</td>
            <td style="background-color:#FFFFFF;">把数字转换成字符串,使用本地格式数字规约。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#0000ff">toFixed()</td>
            <td style="background-color:#FFFFFF;">把数字转换成字符串,结果的小数点后有指定位数的数字。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#0000ff">toExponential()</td>
            <td style="background-color:#FFFFFF;">把数字转换成字符串,结果采用指数计数法,小数点后有指定位数的数字。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#0000ff">toPrecision()</td>
            <td style="background-color:#FFFFFF;">把数字转换成字符串,结果中包含指定位数的有效数字。</td>
        </tr>
        </tbody>
    </table>
    </p>
</li>
<li>RegExp对象
    <p>
    <table style="width: 640px; background-color: #ccccff;" border="0" cellspacing="1" cellpadding="2">
        <tbody>
        <tr>
            <td style="background-color:#FFFFFF; color:#999900">global</td>
            <td style="background-color:#FFFFFF;">对象是否具有性质g。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#999900">ignoreCase</td>
            <td style="background-color:#FFFFFF;">对象是否具有性质i。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#999900">lastIndex</td>
            <td style="background-color:#FFFFFF;">上次匹配后的字符位置,用于一个字符串中进行多次匹配。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#999900">multiline</td>
            <td style="background-color:#FFFFFF;">对象是否具有性质m。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#999900">source</td>
            <td style="background-color:#FFFFFF;">正则表达式的源文本。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#0000ff">exec()</td>
            <td style="background-color:#FFFFFF;">执行强大的、通用的模式匹配。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#0000ff">test()</td>
            <td style="background-color:#FFFFFF;">检测一个字符串是否含有某个模式。</td>
        </tr>
        </tbody>
    </table>
    <br />
    详细资料大家可以参考 <a href="http://blog.csdn.net/zhiqiangzhan/archive/2009/10/12/4659534.aspx">Javascript核心参考教程--RegExp对象</a> </p>
</li>
<li>String对象
    <p>
    <table style="width: 640px; background-color: #ccccff;" border="0" cellspacing="1" cellpadding="2">
        <tbody>
        <tr>
            <td style="background-color:#FFFFFF; color:#999900">fromCharCode()</td>
            <td style="background-color:#FFFFFF;">静态方法, 用作为参数而传递的字符代码创建一个新的字符串。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#999900">length</td>
            <td style="background-color:#FFFFFF;">字符串的长度。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#0000ff">charAt()</td>
            <td style="background-color:#FFFFFF;">抽取字符串中指定位置的字符。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#0000ff">charCodeAt()</td>
            <td style="background-color:#FFFFFF;">返回字符串中指定位置的字符编码。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#0000ff">concat()</td>
            <td style="background-color:#FFFFFF;">把一个或多个值连接到字符串上。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#0000ff">indexOf()</td>
            <td style="background-color:#FFFFFF;">在字符串中检索一个字符或一个子串。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#0000ff">lastIndexOf()</td>
            <td style="background-color:#FFFFFF;">在字符串中向后检索一个字符或一个子串。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#0000ff">localeCompare()</td>
            <td style="background-color:#FFFFFF;">用本地特定顺序来比较两个字符串。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#0000ff">match()</td>
            <td style="background-color:#FFFFFF;">用正则表达式执行模式匹配。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#0000ff">replace()</td>
            <td style="background-color:#FFFFFF;">用正则表达式执行查找、替换操作。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#0000ff">search()</td>
            <td style="background-color:#FFFFFF;">检索字符串中与正则表达式匹配的子串。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#0000ff">slice()</td>
            <td style="background-color:#FFFFFF;">返回字符串的一个片断或一个子串。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#0000ff">split()</td>
            <td style="background-color:#FFFFFF;">把字符串分割成一个字符串数组,在指定的分界字符处或正则表达式处执行分割。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#0000ff">substring()</td>
            <td style="background-color:#FFFFFF;">从字符串中抽取一个子串。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#0000ff">substr()</td>
            <td style="background-color:#FFFFFF;">从字符串中抽取一个子串。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#0000ff">toLowerCase()</td>
            <td style="background-color:#FFFFFF;">把字符串中所有字符转换成小写的,然后返回一个副本。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#0000ff">toString()</td>
            <td style="background-color:#FFFFFF;">返回原始的字符串值。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#0000ff">toUpperCase()</td>
            <td style="background-color:#FFFFFF;">把字符串中所有字符转换成大写的,然后返回一个副本。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#0000ff">valueOf()</td>
            <td style="background-color:#FFFFFF;">返回原始字符串值。</td>
        </tr>
        </tbody>
    </table>
    <br /><br />除此之外，String 还有一些与HTML操作特定的方法，但是ECMAScript没有标准化这些方法。<br />
    <table style="width: 640px; background-color: #ccccff;" border="0" cellspacing="1" cellpadding="2">
        <tbody>
        <tr>
            <td style="background-color:#FFFFFF; color:#0000ff">anchor()</td>
            <td style="background-color:#FFFFFF;">在&lt;a name=&gt;环境中返回一个字符串的副本。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#0000ff">big()</td>
            <td style="background-color:#FFFFFF;">在&lt;big&gt;环境中返回一个字符串的副本。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#0000ff">blink()</td>
            <td style="background-color:#FFFFFF;">在&lt;blink&lt;环境中返回一个字符串的副本。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#0000ff">bold()</td>
            <td style="background-color:#FFFFFF;">在&lt;b&gt;环境中返回一个字符串的副本。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#0000ff">indexOf()</td>
            <td style="background-color:#FFFFFF;">在字符串中检索一个字符或一个子串。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#0000ff">lastIndexOf()</td>
            <td style="background-color:#FFFFFF;">在字符串中向后检索一个字符或一个子串。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#0000ff">localeCompare()</td>
            <td style="background-color:#FFFFFF;">用本地特定顺序来比较两个字符串。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#0000ff">match()</td>
            <td style="background-color:#FFFFFF;">用正则表达式执行模式匹配。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#0000ff">fixed()</td>
            <td style="background-color:#FFFFFF;">在&lt;tt&gt;环境中返回一个字符串的副本。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#0000ff">fontcolor()</td>
            <td style="background-color:#FFFFFF;">在&lt;font color=&gt;环境中返回一个字符串的副本。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#0000ff">fontsize()</td>
            <td style="background-color:#FFFFFF;">在&lt;font size=&gt;环境中返回一个字符串的副本。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#0000ff">italics()</td>
            <td style="background-color:#FFFFFF;">在&lt;i&gt;环境中返回一个字符串的副本。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#0000ff">link()</td>
            <td style="background-color:#FFFFFF;">在&lt;a href=&gt;环境中返回一个字符串的副本。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#0000ff">small()</td>
            <td style="background-color:#FFFFFF;">在&lt;small&gt;环境中返回一个字符串的副本。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#0000ff">strike()</td>
            <td style="background-color:#FFFFFF;">在&lt;strike&gt;环境中返回一个字符串的副本。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#0000ff">sub()</td>
            <td style="background-color:#FFFFFF;">在&lt;sub&gt;环境中返回一个字符串的副本。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#0000ff">sup()</td>
            <td style="background-color:#FFFFFF;">在&lt;sup&gt;环境中返回一个字符串的副本。</td>
        </tr>
        </tbody>
    </table>
    </p>
</li>
<li>Boolean对象(0、NaN、null、空字符串和undefined都将转换成false)
    <p>&nbsp;</p>
</li>
<li>Error对象
    <p>
    <table style="width: 640px; background-color: #ccccff;" border="0" cellspacing="1" cellpadding="2">
        <tbody>
        <tr>
            <td style="background-color:#FFFFFF; color:#999900">message</td>
            <td style="background-color:#FFFFFF;">提供异常详细信息的错误消息。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#999900">name</td>
            <td style="background-color:#FFFFFF;">声名异常类型的字符串。</td>
        </tr>
        <tr>
            <td style="background-color:#FFFFFF; color:#0000ff">toString()</td>
            <td style="background-color:#FFFFFF;">返回一个表示Error对象的字符串。</td>
        </tr>
        </tbody>
    </table>
    <p>子对象类型，指示具体的错误类型。<br /><br />
    <ul>
        <li>EvalError(执行错误)。</li>
        <li>RangeError(在数字超出合法范围时抛出)。</li>
        <li>ReferenceError(在读取不存在的变量时抛出)。</li>
        <li>SyntaxError(抛出该错误用来通知语法错)。</li>
        <li>TypeError(当一个值的类型错误时,抛出该异常)。</li>
        <li>URIError(由URI的编码和解码方法抛出)。</li>
    </ul>
    </p>
    </p>
</li>
</ol>
</p>