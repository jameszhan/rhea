#encoding=utf-8

DB_ENV = "development"
ROOT = File.expand_path(File.dirname(__FILE__))
database_config = File.expand_path(File.dirname(__FILE__) + "/database.yml")
log_path = File.expand_path(File.dirname(__FILE__) + "/migration.log")



namespace :db do
  task :environment => :load_config do
    ActiveRecord::Base.establish_connection(YAML.load(File.new(database_config))[DB_ENV])
    ActiveRecord::Base.logger = Logger.new(log_path)
  end

  task :load_config do
    require 'active_record'
    ActiveRecord::Base.configurations = YAML.load(File.new(database_config))
  end

  desc '创建数据库'
  task :create => :load_config do
    create_database(ActiveRecord::Base.configurations[DB_ENV])
  end

  desc '删除数据库'
  task :drop => :load_config do
    config = ActiveRecord::Base.configurations[DB_ENV]
    begin
      drop_database(config)
    rescue Exception => e
      puts "Couldn't drop #{config['database']} : #{e.inspect}"
    end
  end

  desc "迁移数据库"
  task :migrate => :environment do
    ActiveRecord::Migration.verbose = ENV["VERBOSE"] ? ENV["VERBOSE"] == "true" : true
    ActiveRecord::Migrator.migrate("migrate", ENV["VERSION"] ? ENV["VERSION"].to_i : nil)
    Rake::Task["db:schema:dump"].invoke if ActiveRecord::Base.schema_format == :ruby
  end


  desc '重置数据库'
  task :reset => [ 'db:drop', 'db:setup' ]

  desc '重置数据库并且执行seed'
  task :setup => [ 'db:create', 'db:schema:load', 'db:seed' ]

  desc '执行 seed.rb'
  task :seed => :environment do
    seed_file = File.expand_path(File.dirname(__FILE__) + "/seed.rb")
    load(seed_file) if File.exist?(seed_file)
  end

  namespace :schema do
    desc "创建schema.rb"
    task :dump => :environment do
      require 'active_record/schema_dumper'
      File.open(File.expand_path(File.dirname(__FILE__) + "/schema.rb"), "wb") do |file|
        ActiveRecord::SchemaDumper.dump(ActiveRecord::Base.connection, file)
      end
      Rake::Task["db:schema:dump"].reenable
    end

    desc "load schema.rb到数据库"
    task :load => :environment do
      file = File.expand_path(File.dirname(__FILE__) + "/schema.rb")
      if File.exists?(file)
        load(file)
      else
        abort %{error}
      end
    end
  end

  namespace :structure do
    desc "导出sql文件"
    task :dump => :environment do
      abcs = ActiveRecord::Base.configurations
      case abcs[DB_ENV]["adapter"]
      when "mysql", "oci", "oracle"
        ActiveRecord::Base.establish_connection(abcs[DB_ENV])
        File.open(ROOT + "/#{DB_ENV}_structure.sql", "wb") do |f|
          f << ActiveRecord::Base.connection.structure_dump
        end
      else
        raise "不支持数据库类型： '#{abcs["test"]["adapter"]}'"
      end

      if ActiveRecord::Base.connection.supports_migrations?
        File.open(ROOT + "/#{DB_ENV}_structure.sql", "a") do |f|
          f << ActiveRecord::Base.connection.dump_schema_information
        end
      end
    end
  end

end

def drop_database(config)
  case config['adapter']
    when 'mysql'
      ActiveRecord::Base.establish_connection(config)
      ActiveRecord::Base.connection.drop_database config['database']
    else
      $stderr.puts "删除数据库出错"
  end
end

def create_database(config)
  case config['adapter']
    when 'mysql'
      @charset   = 'utf8'
      @collation = 'utf8_unicode_ci'
      begin
        ActiveRecord::Base.establish_connection(config.merge('database' => nil))
        ActiveRecord::Base.connection.create_database(config['database'], :charset => (@charset), :collation => (@collation))
        ActiveRecord::Base.establish_connection(config)
      rescue
        $stderr.puts "创建数据库出错"
      end
    else
      $stderr.puts "擦,就支持mysql"
  end
end